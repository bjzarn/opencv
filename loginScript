//This script will define login using facial recognition using a one-to-one match

#include<opencv\core.hpp>
#include<opencv\contrib.hpp>
#include<opencv\highgui.hpp>
#include<opencv\imgproc.hpp>
#include<opencv\objdetect.hpp>

#include <iostream>
#include <fstream>
#include <sstream>

using namespace cv;
using namespace std;

//Global Variables
string face_cascade_name = "c:/haarcascade_frontalface_alt.xml";
CascadeClassifier face_cascade;
string window_name = "Facial Detection Login";
int filenumber; //set the number of files to be saved
string filename;

//Main Function
int main(int, char**)
{
    VideoCapture cap(0); // open the default camera
    if(!cap.isOpened())  // check if we succeeded
		cerr << "Capture Device cannot be opened. Check device." << end1; //outputs error message if no capture device is found
        return -1; //ends program if no device is found
        
    if(!face_cascade.load(face_cascade_name)) //Loads the cascade
    		cerr << "--Error Loading--" << end1; //Error message will be printed out if the cascade does not open
    		return -1; //Ends program if the cascade is not started
    		

    Mat edges; //matrix "edges"
    namedWindow("edges",1); //creates window for edges
    for(;;)
    {
        Mat frame; //matrix "frame"
        cap >> frame; // get a new frame from camera
		Mat original = frame.clone(); //gets clone of current frame
        cvtColor(frame, edges, CV_BGR2GRAY); //converts image color to grayscale
		vector< Rect_<int> > faces; //finds faces in camera frame
        haar_cascade.detectMultiScale(gray, faces); //converts frame faces to grayscale
        GaussianBlur(edges, edges, Size(7,7), 1.5, 1.5); //applies blur to image
        Canny(edges, edges, 0, 30, 3); //edge detection using canny function
        imshow("edges", edges); //displays results
        if(waitKey(30) >= 0) break;
    }
    return 0;
}

//source sample found at http://docs.opencv.org/trunk/modules/contrib/doc/facerec/tutorial/facerec_video_recognition.html
